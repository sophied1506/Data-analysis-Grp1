tbl_xts(spread_by = "symbol")
library(tidymodels)
fang <- FANG_monthly_returns |>
tbl_xts(spread_by = "symbol")
install.packages("tbl2xts")
library(tbl2xts)
fang <- FANG_monthly_returns |>
tbl_xts(spread_by = "symbol")
cor(fang)
port_spec
# Create the portfolio specification
port_spec <- portfolio.spec(colnames(fang))
View(port_spec)
FANG
library(ggplot2)
FANG_monthly_returns <- FANG |>
group_by(symbol) |>
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
type       = "arithmetic")
FANG_stats <- FANG_monthly_returns |>
summarise(mean = mean(monthly.returns),
sd = sd(monthly.returns),
sr = mean/sd)
FANG_stats
library(ggplot2)
ggplot(FANG_stats, aes(x = sd, y = mean, color = symbol)) +
geom_point(size = 5) +
geom_text(aes(label = paste0(symbol)),
vjust = 2, color = "black", size = 3.5) +
labs(x = "Risk", y = "Return") +
scale_y_continuous(limits = c(0.01, 0.06),
labels = scales::percent) +
scale_x_continuous(labels = scales::percent) +
theme_tq() +
theme(legend.position = "none", legend.title = element_blank())
# Plot results.
chart.RiskReward(opt_rand, risk.col = "StdDev",
return.col = "mean", chart.assets = TRUE,
xlim = c(0, 0.10))
set.seed(13)
opt_rand <- optimize.portfolio(fang, portfolio = port_spec,
optimize_method = "random", trace = TRUE)
# Create the portfolio specification
port_spec <- portfolio.spec(colnames(fang))
port_spec
port_spec <- add.constraint(portfolio = port_spec, type = "weight_sum",
min_sum = 0.99, max_sum = 1.01)
port_spec
port_spec <- add.constraint(portfolio = port_spec, type = "box",
min = 0, max = 1)
port_spec
# Add an objective to minimize portfolio standard deviation
port_spec <- add.objective(portfolio = port_spec,
type = "risk",
name = "StdDev")
port_spec <- add.objective(portfolio = port_spec,
type = "return",
name = "mean")
port_spec
set.seed(13)
opt_rand <- optimize.portfolio(fang, portfolio = port_spec,
optimize_method = "random", trace = TRUE)
#| label: fig-boxplot2
#| fig-cap: Boxplot visualising returns taking into account the risk with realised values
r_stocks <- c("META", "AMZN", "NFLX", "GOOG") |>
tq_get(get  = "stock.prices", from = "2016-12-31",
to   = "2017-01-31") |>
group_by(symbol) |>
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "R_stocks") |>
tbl_xts(spread_by = "symbol")
#| warning: false
#| message: false
#| echo: false
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(gt)
library(MASS)
library(patchwork)
library(moderndive)
library(dplyr)
library(gapminder)
library(sjPlot)
library(stats)
library(readr)
library(janitor)
library(ggstats)
library(skimr)
#| label: fig-boxplot2
#| fig-cap: Boxplot visualising returns taking into account the risk with realised values
r_stocks <- c("META", "AMZN", "NFLX", "GOOG") |>
tq_get(get  = "stock.prices", from = "2016-12-31",
to   = "2017-01-31") |>
group_by(symbol) |>
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "R_stocks") |>
tbl_xts(spread_by = "symbol")
#| echo: false
library(tbl2xts)
library(tidyverse)
library(tibble)
library(tidymodels)
library(tidyquant)
library(quantmod)
library(timetk)
library(PortfolioAnalytics)
#| label: fig-boxplot2
#| fig-cap: Boxplot visualising returns taking into account the risk with realised values
r_stocks <- c("META", "AMZN", "NFLX", "GOOG") |>
tq_get(get  = "stock.prices", from = "2016-12-31",
to   = "2017-01-31") |>
group_by(symbol) |>
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "R_stocks") |>
tbl_xts(spread_by = "symbol")
boxplot(b, las = 2, main="Boxplot of Predicted Returns with Realised Returns")
#| label: fig-boxplot1
#| fig-cap: Boxplot visualising returns taking into account the risk
sim = 1000
set.seed (7)
s_AMZN <- rnorm(sim, 0.02566966, 0.08172605)
s_FB <- rnorm(sim, 0.03412852, 0.09894324)
s_GOOG <- rnorm(sim, 0.01757620, 0.05941703)
s_NFLX <- rnorm(sim, 0.05919893, 0.16656346)
s_ran <- rnorm(sim, opt_rand$opt_values$mean, opt_rand$opt_values$StdDev)
b = cbind(s_FB, s_AMZN, s_NFLX, s_GOOG, s_ran)
boxplot(b, las = 2, main="Boxplot of Predicted Returns")
abline(h = 0, lty = 2)
#| label: fig-boxplot2
#| fig-cap: Boxplot visualising returns taking into account the risk with realised values
r_stocks <- c("META", "AMZN", "NFLX", "GOOG") |>
tq_get(get  = "stock.prices", from = "2016-12-31",
to   = "2017-01-31") |>
group_by(symbol) |>
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "R_stocks") |>
tbl_xts(spread_by = "symbol")
boxplot(b, las = 2, main="Boxplot of Predicted Returns with Realised Returns")
abline(h = 0, lty = 2)
points(1, 0.1208283,  col = "red", pch = 19, cex = 2)
points(2, 0.101782,   col = "red", pch = 19, cex = 2)
points(3, 0.1076947,  col = "red", pch = 19, cex = 2)
points(4, 0.02058163, col = "red", pch = 19, cex = 2)
points(5, sum(opt_rand$weights * r_stocks), col = "red",
pch = 19, cex = 2)
legend(col="RED", legend= "Realised Return")
#| label: fig-boxplot2
#| fig-cap: Boxplot visualising returns taking into account the risk with realised values
r_stocks <- c("META", "AMZN", "NFLX", "GOOG") |>
tq_get(get  = "stock.prices", from = "2016-12-31",
to   = "2017-01-31") |>
group_by(symbol) |>
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "R_stocks") |>
tbl_xts(spread_by = "symbol")
boxplot(b, las = 2, main="Boxplot of Predicted Returns with Realised Returns")
abline(h = 0, lty = 2)
points(1, 0.1208283,  col = "red", pch = 19, cex = 2)
points(2, 0.101782,   col = "red", pch = 19, cex = 2)
points(3, 0.1076947,  col = "red", pch = 19, cex = 2)
points(4, 0.02058163, col = "red", pch = 19, cex = 2)
points(5, sum(opt_rand$weights * r_stocks), col = "red",
pch = 19, cex = 2)
legend(col="red", legend= "Realised Return")
?legend
#| label: fig-boxplot2
#| fig-cap: Boxplot visualising returns taking into account the risk with realised values
r_stocks <- c("META", "AMZN", "NFLX", "GOOG") |>
tq_get(get  = "stock.prices", from = "2016-12-31",
to   = "2017-01-31") |>
group_by(symbol) |>
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "R_stocks") |>
tbl_xts(spread_by = "symbol")
boxplot(b, las = 2, main="Boxplot of Predicted Returns with Realised Returns")
abline(h = 0, lty = 2)
points(1, 0.1208283,  col = "red", pch = 19, cex = 2)
points(2, 0.101782,   col = "red", pch = 19, cex = 2)
points(3, 0.1076947,  col = "red", pch = 19, cex = 2)
points(4, 0.02058163, col = "red", pch = 19, cex = 2)
points(5, sum(opt_rand$weights * r_stocks), col = "red",
pch = 19, cex = 2)
legend(x="left", y= "top" , pch= 19, col="red", legend= "Realised Return")
#| label: fig-boxplot2
#| fig-cap: Boxplot visualising returns taking into account the risk with realised values
r_stocks <- c("META", "AMZN", "NFLX", "GOOG") |>
tq_get(get  = "stock.prices", from = "2016-12-31",
to   = "2017-01-31") |>
group_by(symbol) |>
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "R_stocks") |>
tbl_xts(spread_by = "symbol")
boxplot(b, las = 2, main="Boxplot of Predicted Returns with Realised Returns")
abline(h = 0, lty = 2)
points(1, 0.1208283,  col = "red", pch = 19, cex = 2)
points(2, 0.101782,   col = "red", pch = 19, cex = 2)
points(3, 0.1076947,  col = "red", pch = 19, cex = 2)
points(4, 0.02058163, col = "red", pch = 19, cex = 2)
points(5, sum(opt_rand$weights * r_stocks), col = "red",
pch = 19, cex = 2)
legend(x="top", y= "top" , pch= 19, col="red", legend= "Realised Return")
#| label: fig-boxplot2
#| fig-cap: Boxplot visualising returns taking into account the risk with realised values
r_stocks <- c("META", "AMZN", "NFLX", "GOOG") |>
tq_get(get  = "stock.prices", from = "2016-12-31",
to   = "2017-01-31") |>
group_by(symbol) |>
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "R_stocks") |>
tbl_xts(spread_by = "symbol")
boxplot(b, las = 2, main="Boxplot of Predicted Returns with Realised Returns")
abline(h = 0, lty = 2)
points(1, 0.1208283,  col = "red", pch = 19, cex = 2)
points(2, 0.101782,   col = "red", pch = 19, cex = 2)
points(3, 0.1076947,  col = "red", pch = 19, cex = 2)
points(4, 0.02058163, col = "red", pch = 19, cex = 2)
points(5, sum(opt_rand$weights * r_stocks), col = "red",
pch = 19, cex = 2)
legend(x="right", y= "bottom" , pch= 19, col="red", legend= "Realised Return")
#| label: fig-boxplot2
#| fig-cap: Boxplot visualising returns taking into account the risk with realised values
r_stocks <- c("META", "AMZN", "NFLX", "GOOG") |>
tq_get(get  = "stock.prices", from = "2016-12-31",
to   = "2017-01-31") |>
group_by(symbol) |>
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "R_stocks") |>
tbl_xts(spread_by = "symbol")
boxplot(b, las = 2, main="Boxplot of Predicted Returns with Realised Returns")
abline(h = 0, lty = 2)
points(1, 0.1208283,  col = "red", pch = 19, cex = 2)
points(2, 0.101782,   col = "red", pch = 19, cex = 2)
points(3, 0.1076947,  col = "red", pch = 19, cex = 2)
points(4, 0.02058163, col = "red", pch = 19, cex = 2)
points(5, sum(opt_rand$weights * r_stocks), col = "red",
pch = 19, cex = 2)
legend(x="bottomright" , pch= 19, col="red", legend= "Realised Return")
?boxplot
#| label: fig-boxplot1
#| fig-cap: Boxplot visualising returns taking into account the risk
sim = 1000
set.seed (7)
s_AMZN <- rnorm(sim, 0.02566966, 0.08172605)
s_FB <- rnorm(sim, 0.03412852, 0.09894324)
s_GOOG <- rnorm(sim, 0.01757620, 0.05941703)
s_NFLX <- rnorm(sim, 0.05919893, 0.16656346)
s_ran <- rnorm(sim, opt_rand$opt_values$mean, opt_rand$opt_values$StdDev)
b = cbind(s_FB, s_AMZN, s_NFLX, s_GOOG, s_ran)
boxplot(b, las = 2, main="Boxplot of Predicted Returns",  xlab="Asset", ylab="Return", names=c("FB", "Amazon", "Netflix", "Google", "Optimal Portfolio")
abline(h = 0, lty = 2)
#| label: fig-boxplot1
#| fig-cap: Boxplot visualising returns taking into account the risk
sim = 1000
set.seed (7)
s_AMZN <- rnorm(sim, 0.02566966, 0.08172605)
s_FB <- rnorm(sim, 0.03412852, 0.09894324)
s_GOOG <- rnorm(sim, 0.01757620, 0.05941703)
s_NFLX <- rnorm(sim, 0.05919893, 0.16656346)
s_ran <- rnorm(sim, opt_rand$opt_values$mean, opt_rand$opt_values$StdDev)
b = cbind(s_FB, s_AMZN, s_NFLX, s_GOOG, s_ran)
boxplot(b, las = 2, main="Boxplot of Predicted Returns",  xlab="Asset", ylab="Return", names=c("FB", "Amazon", "Netflix", "Google", "Optimal Portfolio"))
#| label: fig-boxplot1
#| fig-cap: Boxplot visualising returns taking into account the risk
sim = 1000
set.seed (7)
s_AMZN <- rnorm(sim, 0.02566966, 0.08172605)
s_FB <- rnorm(sim, 0.03412852, 0.09894324)
s_GOOG <- rnorm(sim, 0.01757620, 0.05941703)
s_NFLX <- rnorm(sim, 0.05919893, 0.16656346)
s_ran <- rnorm(sim, opt_rand$opt_values$mean, opt_rand$opt_values$StdDev)
b = cbind(s_FB, s_AMZN, s_NFLX, s_GOOG, s_ran)
boxplot(b, las = 2, main="Boxplot of Predicted Returns",  xlab="Asset", ylab="Return", names=c("FB", "Amazon", "Netflix", "Google", "Our Portfolio"))
#| label: fig-boxplot2
#| fig-cap: Boxplot visualising returns taking into account the risk with realised values (the red dot)
r_stocks <- c("META", "AMZN", "NFLX", "GOOG") |>
tq_get(get  = "stock.prices", from = "2016-12-31",
to   = "2017-01-31") |>
group_by(symbol) |>
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "monthly",
col_rename = "R_stocks") |>
tbl_xts(spread_by = "symbol")
boxplot(b, las = 2, main="Boxplot of Predicted Returns with Realised Returns", xlab="Asset", ylab="Return", names=c("FB", "Amazon", "Netflix", "Google", "Optimal Portfolio"))
abline(h = 0, lty = 2)
points(1, 0.1208283,  col = "red", pch = 19, cex = 2)
points(2, 0.101782,   col = "red", pch = 19, cex = 2)
points(3, 0.1076947,  col = "red", pch = 19, cex = 2)
points(4, 0.02058163, col = "red", pch = 19, cex = 2)
points(5, sum(opt_rand$weights * r_stocks), col = "red",
pch = 19, cex = 2)
?boxplot
#| eval: true
#| echo: false
births <- read.csv("project9-births.csv")
Smoke <- as.factor(births$Smoke)
births$Smoke<-factor(births$Smoke, levels=c(0,1), labels<-c("Non Smoker", "Smoker"))
births<-births[-births$Weeks==34,]
#| eval: true
#| echo: false
births <- read.csv("project9-births.csv")
Smoke <- as.factor(births$Smoke)
births$Smoke<-factor(births$Smoke, levels=c(0,1), labels<-c("Non Smoker", "Smoker"))
births<--births[births$Weeks==34,]
#| eval: true
#| echo: false
births <- read.csv("project9-births.csv")
Smoke <- as.factor(births$Smoke)
births$Smoke<-factor(births$Smoke, levels=c(0,1), labels<-c("Non Smoker", "Smoker"))
births<-births[births$Weeks!=34,]
View(births)
#| warning: false
#| label: fig-scat1
#| fig-cap: Scatterplot of Maternal age against birth weight
ggplot(births, aes(x = MomAge, y = BirthWeight, color = Smoke)) +
geom_point() +
labs(title = "Birth Weight vs. Maternal Age",
x = "Maternal Age (years)",
y = "Birth Weight (grams)", color= "Smoke during pregnancy") + geom_smooth(method="lm", se=F)+
scale_color_manual(values = c("Smoker" = "springgreen", "Non Smoker" = "darkgreen"))
#| warning: false
#| message: false
#| echo: false
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(gt)
library(MASS)
library(patchwork)
library(moderndive)
library(dplyr)
library(gapminder)
library(sjPlot)
library(stats)
library(readr)
library(janitor)
library(ggstats)
library(skimr)
#| warning: false
#| fig-cap: Box plot of Birth weight by smoking status
#| label: fig-box1
ggplot(births, aes(x = factor(Smoke), y = BirthWeight, fill = factor(Smoke))) +
geom_boxplot(alpha = 0.5, show.legend = FALSE, fill = c("darkgreen", "springgreen")) +
coord_flip() +
labs(x = "Smoker during pregnancy?", y = "Birth Weight (grams)") +
scale_x_discrete(labels = c("No", "Yes"))+
ggtitle("Birth Weight by Smoking Status")
births<-births[births$Weeks!=34,]
#| warning: false
#| label: fig-scat1
#| fig-cap: Scatterplot of Maternal age against birth weight
ggplot(births, aes(x = MomAge, y = BirthWeight, color = Smoke)) +
geom_point() +
labs(title = "Birth Weight vs. Maternal Age",
x = "Maternal Age (years)",
y = "Birth Weight (grams)", color= "Smoke during pregnancy") + geom_smooth(method="lm", se=F)+
scale_color_manual(values = c("Smoker" = "springgreen", "Non Smoker" = "darkgreen"))
#| label: tbl-smoke1
#| tbl-cap: Linear model output between smoking and non-smoking mothers on babies' birth weight
#| keep-tex: true
#| tbl-pos: 'H'
lm_spec <- linear_reg() |> set_engine("lm")
slr.model1<- lm_spec|>fit(BirthWeight ~ Smoke, data = births)
slr.model1<- slr.model1|> extract_fit_engine()
gt(get_regression_table(slr.model1))
#| label: fig-resid1
#| fig-cap: Residuals vs Smoke (Plot 1) and Histogram of Residuals (Plot 2)
regression.points<-get_regression_points(slr.model1)
plot1<-ggplot(regression.points, aes(x = Smoke, y = residual))+
geom_jitter(width = 0.1) +labs(x = "Was mother a Smoker?", y = "Residual") + geom_hline(yintercept = 0, col = "red")+ ggtitle("Plot 1")
plot2<-ggplot(regression.points, aes(x = residual)) +   geom_histogram(binwidth = 150, color = "white") +    labs(x = "Residual", y="Count", title="Plot 2") +
facet_wrap(births$Smoke)
plot1+plot2+plot_layout()
#| label: fig-resid1
#| fig-cap: Residuals vs Smoke (Plot 1) and Histogram of Residuals (Plot 2)
regression.points<-get_regression_points(slr.model1)
plot1<-ggplot(regression.points, aes(x = Smoke, y = residual))+
geom_jitter(width = 0.1) +labs(x = "Was mother a Smoker?", y = "Residual") + geom_hline(yintercept = 0, col = "red")+ ggtitle("Residuals vs Smoke (Plot 1)")
plot2<-ggplot(regression.points, aes(x = residual)) +   geom_histogram(binwidth = 150, color = "white") +    labs(x = "Residual", y="Count", title="Histogram of Residuals (Plot 2) ") +
facet_wrap(births$Smoke)
plot1+plot2+plot_layout()
#| eval: true
#| echo: false
births <- read.csv("project9-births.csv")
Smoke <- as.factor(births$Smoke)
births$Smoke<-factor(births$Smoke, levels=c(0,1), labels<-c("Non Smoker", "Smoker"))
births<-births[births$Weeks<37,]
#| warning: false
#| fig-cap: Box plot of Birth weight by smoking status
#| label: fig-box1
ggplot(births, aes(x = factor(Smoke), y = BirthWeight, fill = factor(Smoke))) +
geom_boxplot(alpha = 0.5, show.legend = FALSE, fill = c("darkgreen", "springgreen")) +
coord_flip() +
labs(x = "Smoker during pregnancy?", y = "Birth Weight (grams)") +
scale_x_discrete(labels = c("No", "Yes"))+
ggtitle("Birth Weight by Smoking Status")
#| eval: true
#| echo: false
births <- read.csv("project9-births.csv")
Smoke <- as.factor(births$Smoke)
births$Smoke<-factor(births$Smoke, levels=c(0,1), labels<-c("Non Smoker", "Smoker"))
births<-births[births$Weeks>=36,]
#| eval: true
#| echo: false
births <- read.csv("project9-births.csv")
Smoke <- as.factor(births$Smoke)
births$Smoke<-factor(births$Smoke, levels=c(0,1), labels<-c("Non Smoker", "Smoker"))
births<-births[births$Weeks>=37,]
#| warning: false
#| fig-cap: Box plot of Birth weight by smoking status
#| label: fig-box1
ggplot(births, aes(x = factor(Smoke), y = BirthWeight, fill = factor(Smoke))) +
geom_boxplot(alpha = 0.5, show.legend = FALSE, fill = c("darkgreen", "springgreen")) +
coord_flip() +
labs(x = "Smoker during pregnancy?", y = "Birth Weight (grams)") +
scale_x_discrete(labels = c("No", "Yes"))+
ggtitle("Birth Weight by Smoking Status")
#| eval: true
#| echo: false
births <- read.csv("project9-births.csv")
Smoke <- as.factor(births$Smoke)
births$Smoke<-factor(births$Smoke, levels=c(0,1), labels<-c("Non Smoker", "Smoker"))
#| warning: false
#| fig-cap: Box plot of Birth weight by smoking status
#| label: fig-box1
ggplot(births, aes(x = factor(Smoke), y = BirthWeight, fill = factor(Smoke))) +
geom_boxplot(alpha = 0.5, show.legend = FALSE, fill = c("darkgreen", "springgreen")) +
coord_flip() +
labs(x = "Smoker during pregnancy?", y = "Birth Weight (grams)") +
scale_x_discrete(labels = c("No", "Yes"))+
ggtitle("Birth Weight by Smoking Status")
births<-births[births$Weeks>=36,]
#| warning: false
#| fig-cap: Box plot of Birth weight by smoking status
#| label: fig-box1
ggplot(births, aes(x = factor(Smoke), y = BirthWeight, fill = factor(Smoke))) +
geom_boxplot(alpha = 0.5, show.legend = FALSE, fill = c("darkgreen", "springgreen")) +
coord_flip() +
labs(x = "Smoker during pregnancy?", y = "Birth Weight (grams)") +
scale_x_discrete(labels = c("No", "Yes"))+
ggtitle("Birth Weight by Smoking Status")
births<-births[births$Weeks>=37,]
#| eval: true
#| echo: false
births <- read.csv("project9-births.csv")
Smoke <- as.factor(births$Smoke)
births$Smoke<-factor(births$Smoke, levels=c(0,1), labels<-c("Non Smoker", "Smoker"))
mod2 %>% broom::tidy() %>% gt()
#| echo: false
#| warning: false
#| message: false
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidymodels)
library(sjPlot)
library(performance)
library(kableExtra)
library(gt)
library(tidyverse)
library(gt)
library(MASS)
library(patchwork)
library(moderndive)
df<-read.csv("DAProject3.csv")
setwd("~/GitHub/tutorial1/Data-analysis-Grp1")
#| label: fig-gender
#| fig-cap: Proportion of Obesity by Gender
#| out.width: "50%"
#| fig-pos: "H"
proportionsgender <- df |>
group_by(Sex, Obese) |>
summarise(Count = n(), .groups = "drop") |>
group_by(Sex) |>
mutate(Proportion = Count/sum(Count))
df<-read.csv("DAProject3.csv")
df$Sex<-as.factor(df$Sex)
df$AgeGroup<-as.factor(df$AgeGroup)
df$Veg<-as.factor(df$Veg)
df$Fruit<-as.factor(df$Fruit)
df$Obese<-as.factor(df$Obese)
df$Employment<-as.factor(df$Employment)
df$Employment_Clean<-as.factor(ifelse(df$Employment=="In full-time education"|df$Employment=="In paid employment, self-employed or on gov't training", "Employed/Full-Time Training or Education",ifelse(df$Employment=="Retired", "Retired", "Unemployed/Other")))
df$FV<-as.factor(ifelse(df$Fruit=="Yes"|df$Veg=="Yes", "Yes", "No"))
df$AgeCategory <- as.factor(ifelse(df$AgeGroup %in% c("16-24", "25-34"), "Young",
ifelse(df$AgeGroup %in% c("35-44", "45-54", "55-64"), "Middle-aged",
"Old")))
df$AgeCategory <- relevel(df$AgeCategory, ref = "Young")
#| echo: false
mod2 <- glm(Obese ~ Sex + Year + FV + AgeCategory + Employment_Clean, data = df, family = binomial)
mod2 %>% broom::tidy() %>% gt()
